name: Linux Post Commit Checks

on:
  push:
    branches:
      - sycl
jobs:
  check:
    runs-on: ubuntu-20.04
    if: github.repository == 'intel/llvm'
    strategy:
      fail-fast: false
      matrix:
        config: ["Default", "SharedLibs", "NoAssertions"]

    steps:
    - uses: actions/checkout@v2
      with:
        path: src
    - name: Install Ubuntu deps
      run: sudo apt install -y ninja-build ccache
    - name: Setup Cache
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.workspace }}/cache
        key: build-${{ runner.os }}-${{ matrix.config }}-${{ github.sha }}
        restore-keys: |
          build-${{ runner.os }}-${{ matrix.config }}-
    - name: Configure
      run: |
        CONFIG=${{ matrix.config }}
        case $CONFIG in
            Default)
                export ARGS=""
                ;;
            SharedLibs)
                wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
                sudo add-apt-repository "deb http://apt.llvm.org/focal/   llvm-toolchain-focal-13 main"
                sudo apt-get update
                sudo apt-get install -y clang-13
                export ARGS="--shared-libs"
                export CC="clang-13"
                export CXX="clang++-13"
                ;;
            NoAssertions)
                export ARGS="--no-assertions"
                ;;
        esac
        mkdir -p $GITHUB_WORKSPACE/build
        cd $GITHUB_WORKSPACE/build
        python3 $GITHUB_WORKSPACE/src/buildbot/configure.py -w $GITHUB_WORKSPACE \
        -s $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t Release \
        --ci-defaults $ARGS --cmake-opt="-DLLVM_CCACHE_BUILD=ON" \
        --cmake-opt="-DLLVM_CCACHE_DIR=$GITHUB_WORKSPACE/cache" \
        --cmake-opt="-DLLVM_CCACHE_MAXSIZE=2G"
    - name: Compile
      run: |
        python3 $GITHUB_WORKSPACE/src/buildbot/compile.py -w  $GITHUB_WORKSPACE \
        -s  $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build
    - name: check-llvm
      if: always()
      run: |
        python3 $GITHUB_WORKSPACE/src/buildbot/check.py -w  $GITHUB_WORKSPACE \
        -s  $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t check-llvm
    - name: check-clang
      if: always()
      run: |
        python3 $GITHUB_WORKSPACE/src/buildbot/check.py -w  $GITHUB_WORKSPACE \
        -s  $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t check-clang
    - name: check-sycl
      if: always()
      run: |
        python3 $GITHUB_WORKSPACE/src/buildbot/check.py -w  $GITHUB_WORKSPACE \
        -s  $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t check-sycl
    - name: check-llvm-spirv
      if: always()
      run: |
        python3 $GITHUB_WORKSPACE/src/buildbot/check.py -w  $GITHUB_WORKSPACE \
        -s  $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t check-llvm-spirv
    - name: check-xptifw
      if: always()
      run: |
        python3 $GITHUB_WORKSPACE/src/buildbot/check.py -w  $GITHUB_WORKSPACE \
        -s  $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t check-xptifw
    - name: Pack
      run: tar -czvf llvm_sycl.tar.gz -C $GITHUB_WORKSPACE/build/install .
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: sycl_linux_${{ matrix.config }}
        path: llvm_sycl.tar.gz
  drivers_image_ubuntu2004:
    name: Intel Drivers Ubuntu 20.04 Docker image (stable versions)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if dependencies have changed
        id: deps_changed
        shell: bash {0}
        run: |
          git diff --exit-code HEAD~1 -- devops/dependencies.json
          echo "::set-output name=flag::$?"
      - name: Get dependencies configuration
        id: get_deps
        if: ${{ steps.deps_changed.outputs.flag }}
        run: |
          DEPS=`cat devops/dependencies.json`
          DEPS="${DEPS//'%'/'%25'}"
          DEPS="${DEPS//$'\n'/'%0A'}"
          DEPS="${DEPS//$'\r'/'%0D'}"
          echo $DEPS
          echo "::set-output name=dependenciesJson::$DEPS"
      - name: Build and Push Container
        uses: docker/build-push-action@v2
        if: ${{ steps.deps_changed.outputs.flag }}
        with:
          push: true
          build-args: |
            compute_runtime_tag=${{fromJson(steps.get_deps.outputs.dependenciesJson).linux.compute_runtime_tag}}
            igc_tag=${{fromJson(steps.get_deps.outputs.dependenciesJson).linux.igc_tag}}
            tbb_tag=${{fromJson(steps.get_deps.outputs.dependenciesJson).linux.tbb_tag}}
            fpgaemu_tag=${{fromJson(steps.get_deps.outputs.dependenciesJson).linux.fpgaemu_tag}}
            cpu_tag=${{fromJson(steps.get_deps.outputs.dependenciesJson).linux.cpu_tag}}
          tags: |
            ghcr.io/${{ github.repository }}/ubuntu2004_intel_drivers:stable-${{ github.sha }}
            ghcr.io/${{ github.repository }}/ubuntu2004_intel_drivers:stable
          context: ${{ github.workspace }}/devops
          file: ${{ github.workspace }}/devops/containers/ubuntu2004_intel_drivers.Dockerfile
