name: Reusable SYCL Linux build and test workflow

on:
  workflow_call:
    inputs:
      cc:
        type: string
        required: false
        default: "gcc"
      cxx:
        type: string
        required: false
        default: "g++"
      build_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_build:latest"
      build_runs_on:
        type: string
        required: false
        default: "ubuntu-latest"
      build_cache_root:
        type: string
        required: true
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_cache_size:
        type: string
        required: false
        default: 8G
      build_configure_extra_args:
        type: string
        required: false
        default: "--hip --hip-amd-arch=gfx906 --cuda"
      build_artifact_suffix:
        type: string
        required: true
      intel_drivers_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_intel_drivers:latest"
      lts_config:
        type: string
        required: false
        default: ""
      amdgpu_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_build:latest"

jobs:
  build:
    name: Build + LIT
    needs: configure
    runs-on: ${{ inputs.build_runs_on }}
    container:
      image: ${{ inputs.build_image }}
      options: -u 1001:1001
    steps:
    # GHA requires relative paths for actions. Copy actions from container root
    # to CWD.
    - run: cp -r /actions .
    # Cleanup will be run after all actions are completed.
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    - uses: ./actions/cached_checkout
      with:
        path: src
        cache_path: "/__w/repo_cache/"
    - name: Configure
      env:
        CC: ${{ inputs.cc }}
        CXX: ${{ inputs.cxx }}
        CACHE_ROOT: ${{ inputs.build_cache_root }}
        CACHE_SUFFIX: ${{ inputs.build_cache_suffix }}
        CACHE_SIZE: ${{ inputs.build_cache_size }}
        ARGS: ${{ inputs.build_configure_extra_args }}
        CUDA_LIB_PATH: "/usr/local/cuda/lib64/stubs"
      run: |
        mkdir -p $CACHE_ROOT/build_cache_$CACHE_SUFFIX
        mkdir -p $GITHUB_WORKSPACE/build
        cd $GITHUB_WORKSPACE/build
        python3 $GITHUB_WORKSPACE/src/buildbot/configure.py -w $GITHUB_WORKSPACE \
          -s $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t Release \
          --ci-defaults $ARGS \
          --cmake-opt="-DLLVM_CCACHE_BUILD=ON" \
          --cmake-opt="-DLLVM_CCACHE_DIR=$CACHE_ROOT/build_cache_$CACHE_SUFFIX" \
          --cmake-opt="-DLLVM_CCACHE_MAXSIZE=$CACHE_SIZE" \
          --cmake-opt="-DLLVM_INSTALL_UTILS=ON" \
          --cmake-opt="-DSYCL_PI_TESTS=OFF"
    - name: Compile
      id: build
      run: cmake --build $GITHUB_WORKSPACE/build
    # TODO allow to optionally disable in-tree checks
    - name: check-llvm
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-llvm
    - name: check-clang
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: |
        export XDG_CACHE_HOME=$GITHUB_WORKSPACE/os_cache
        cmake --build $GITHUB_WORKSPACE/build --target check-clang
    - name: check-sycl
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: |
        # TODO consider moving this to Dockerfile
        export LD_LIBRARY_PATH=/usr/local/cuda/compat/:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
        cmake --build $GITHUB_WORKSPACE/build --target check-sycl
    - name: check-llvm-spirv
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-llvm-spirv
    - name: check-xptifw
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-xptifw
    - name: check-libclc
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-libclc
    - name: Install
      # TODO replace utility installation with a single CMake target
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target deploy-sycl-toolchain
        cmake --build $GITHUB_WORKSPACE/build --target utils/FileCheck/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/count/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/not/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/lit/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/llvm-lit/install
        cmake --build $GITHUB_WORKSPACE/build --target install-clang-format
        cmake --build $GITHUB_WORKSPACE/build --target install-clang-tidy
        cmake --build $GITHUB_WORKSPACE/build --target install-llvm-size
        # TODO this should be resolved in CMakeLists.txt
        cmake --build $GITHUB_WORKSPACE/build --target install-lld || echo "skipped"

    - name: Pack toolchain
      run: tar -cJf llvm_sycl.tar.xz -C $GITHUB_WORKSPACE/build/install .
    - name: Pack LIT
      run: tar -cJf lit.tar.xz -C $GITHUB_WORKSPACE/src/llvm/utils/lit .
    - name: Upload toolchain
      uses: actions/upload-artifact@v1
      with:
        name: sycl_linux_${{ fromJSON(needs.configure.outputs.params).build_artifact_suffix }}
        path: llvm_sycl.tar.xz
    - name: Upload LIT
      uses: actions/upload-artifact@v1
      with:
        name: sycl_lit_${{ fromJSON(needs.configure.outputs.params).build_artifact_suffix }}
        path: lit.tar.xz

  llvm_test_suite:
    strategy:
      matrix:
        include:
        - config: l0_gen9
          name: L0 GEN9 Test Suite
          image: ${{ inputs.intel_drivers_image }}
          container_opts: -u 1001 --device=/dev/dri
          runner: gen9
          check_sycl_all: 'level_zero:gpu,host'
          cmake_args: '-DGPU_AOT_TARGET_OPTS="\\\"-device gen9\\\""'
        - config: ocl_gen9
          name: OCL GEN9 Test Suite
          image: ${{ inputs.intel_drivers_image }}
          container_opts: -u 1001 --device=/dev/dri
          runner: gen9
          check_sycl_all: 'opencl:gpu,host'
          cmake_args: '-DGPU_AOT_TARGET_OPTS="\\\"-device gen9\\\""'
        - config: ocl_x64
          name: OCL x64 Test Suite
          image: ${{ inputs.intel_drivers_image }}
          container_opts: -u 1001
          runner: x64
          check_sycl_all: 'opencl:cpu,host'
          cmake_args: ''
        - config: hip_amdgpu
          name: HIP AMD GPU Test Suite
          image: ${{ inputs.amdgpu_image }}
          container_opts: --device=/dev/dri --device=/dev/kfd
          runner: amdgpu
          check_sycl_all: 'hip:gpu,host'
          cmake_args: '-DHIP_PLATFORM="AMD" -DAMD_ARCH="gfx1031"'
    name: ${{ matrix.name }}
    needs: [build]
    if: |
      always() && contains(inputs.lts_config, matrix.config) &&
      (needs.build.result == 'success' || needs.build.result == 'skipped')
    runs-on: matrix.runner
    container:
      image: matrix.image
      options: matrix.container_opts
    steps:
    - run: cp -r /actions .
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    # TODO remove this step one LLVM Test Suite action is settled and packed
    # into container.
    # FIXME cached_checkout fails here, but works everywhere else
    - uses: actions/checkout@v2
      with:
        path: llvm
    - uses: ./llvm/devops/actions/llvm_test_suite
      name: Run LLVM Test Suite
      with:
        # TODO allow custom test references
        test_ref: 'intel'
        sycl_artifact: sycl_linux_${{ inputs.build_artifact_suffix }}
        sycl_archive: llvm_sycl.tar.xz
        lit_artifact: sycl_lit_${{ inputs.build_artifact_suffix }}
        lit_archive: lit.tar.xz
        check_sycl_all: ${{ matrix.check_sycl_all }}
        results_name_suffix: hip_amdgpu_${{ inputs.build_artifact_suffix }}
        cmake_args: matrix.cmake_args
