name: 'Run llvm-test-suite testing'
description: 'Run E2E SYCL tests from llvm-test-suite'
inputs:
  test_ref:
    description: 'commit-ish identifier for test repo'
    required: true
    default: 'intel'
  sycl_artifact:
    description: 'Name of the artifact, that contains compiler toolchain'
    required: true
  sycl_archive:
    description: 'Name of SYCL toolchain archive file'
    required: false
    default: 'llvm_sycl.tar.xz'
  lit_artifact:
    description: 'Name of the artifact, that contains LIT tool'
    required: true
  lit_archive:
    description: 'Name of LIT archive file'
    required: false
    default: 'lit.tar.xz'
  results_name_suffix:
    description: 'Name suffix of the results artifact'
    required: true
  check_sycl_all:
    description: 'List of targets to include in testing'
    required: true

runs:
  using: "composite"
  steps:
  - name: Checkout LLVM Test Suite
    uses: actions/checkout@v2
    with:
      path: llvm_test_suite
      repository: 'intel/llvm-test-suite'
      ref: ${{ inputs.test_ref }}
  - name: Download compiler toolchain
    uses: actions/download-artifact@v2
    with:
      name: ${{ inputs.sycl_artifact }}
  - name: Extract SYCL toolchain
    shell: bash
    run: |
      mkdir toolchain
      tar -xf ${{ inputs.sycl_archive }} -C toolchain
  - name: Download LIT
    uses: actions/download-artifact@v2
    with:
      name: ${{ inputs.lit_artifact }}
  - name: Extract LIT
    shell: bash
    run: |
      mkdir lit
      ls -la
      tar -xf ${{ inputs.lit_archive }} -C lit
  - name: Debug
    shell: bash
    run: |
      ls -la
      ls -la lit
      ls -la toolchain
  - name: Configure
    shell: bash
    run: |
      mkdir build
      export PATH=$PWD/toolchain/bin/:$PATH
      cmake -GNinja -B./build -S./llvm_test_suite -DTEST_SUITE_SUBDIRS=SYCL -DCHECK_SYCL_ALL="${{ inputs.check_sycl_all }}" -DCMAKE_CXX_COMPILER="$PWD/toolchain/bin/clang++" -DTEST_SUITE_LIT="$PWD/lit/lit.py"
  - name: Run testing
    shell: bash
    run: |
      echo "::group::Prepare"
      export LD_LIBRARY_PATH=$PWD/toolchain/lib/:$LD_LIBRARY_PATH:/runtimes/oclcpu/x64
      export PATH=$PWD/toolchain/bin/:$PATH
      export LIT_OPTS="-v --no-progress-bar --show-unsupported --time-tests -o $PWD/build/results_${{ inputs.results_name_suffix }}.json"
      if [ -e /runtimes/oneapi-tbb/env/vars.sh ]; then
        source /runtimes/oneapi-tbb/env/vars.sh;
      fi
      sycl-ls
      cd build
      echo "::endgroup::"
      echo "::group::LLVM Test Suite Logs"
      ninja check-sycl-all
      echo "::endgroup::"
  - name: Upload test results
    uses: actions/upload-artifact@v1
    if: always()
    with:
      name: lit_results
      path: build/results_${{ inputs.results_name_suffix }}.json
  - name: Cleanup
    shell: bash
    if: always()
    run: |
      rm -rf toolchain
      rm -rf lit
      rm -rf build
      rm -rf llvm_test_suite
